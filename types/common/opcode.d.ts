export declare enum OpcodeType {
    Unreachable = 0,
    Nop = 1,
    Block = 2,
    Loop = 3,
    If = 4,
    Else = 5,
    Try = 6,
    Catch = 7,
    Throw = 8,
    Rethrow = 9,
    End = 10,
    Br = 11,
    BrIf = 12,
    BrTable = 13,
    Return = 14,
    Call = 15,
    CallIndirect = 16,
    ReturnCall = 17,
    ReturnCallIndirect = 18,
    CallRef = 19,
    Delegate = 20,
    CatchAll = 21,
    Drop = 22,
    Select = 23,
    SelectT = 24,
    LocalGet = 25,
    LocalSet = 26,
    LocalTee = 27,
    GlobalGet = 28,
    GlobalSet = 29,
    I32Load = 30,
    I64Load = 31,
    F32Load = 32,
    F64Load = 33,
    I32Load8S = 34,
    I32Load8U = 35,
    I32Load16S = 36,
    I32Load16U = 37,
    I64Load8S = 38,
    I64Load8U = 39,
    I64Load16S = 40,
    I64Load16U = 41,
    I64Load32S = 42,
    I64Load32U = 43,
    I32Store = 44,
    I64Store = 45,
    F32Store = 46,
    F64Store = 47,
    I32Store8 = 48,
    I32Store16 = 49,
    I64Store8 = 50,
    I64Store16 = 51,
    I64Store32 = 52,
    MemorySize = 53,
    MemoryGrow = 54,
    I32Const = 55,
    I64Const = 56,
    F32Const = 57,
    F64Const = 58,
    I32Eqz = 59,
    I32Eq = 60,
    I32Ne = 61,
    I32LtS = 62,
    I32LtU = 63,
    I32GtS = 64,
    I32GtU = 65,
    I32LeS = 66,
    I32LeU = 67,
    I32GeS = 68,
    I32GeU = 69,
    I64Eqz = 70,
    I64Eq = 71,
    I64Ne = 72,
    I64LtS = 73,
    I64LtU = 74,
    I64GtS = 75,
    I64GtU = 76,
    I64LeS = 77,
    I64LeU = 78,
    I64GeS = 79,
    I64GeU = 80,
    F32Eq = 81,
    F32Ne = 82,
    F32Lt = 83,
    F32Gt = 84,
    F32Le = 85,
    F32Ge = 86,
    F64Eq = 87,
    F64Ne = 88,
    F64Lt = 89,
    F64Gt = 90,
    F64Le = 91,
    F64Ge = 92,
    I32Clz = 93,
    I32Ctz = 94,
    I32Popcnt = 95,
    I32Add = 96,
    I32Sub = 97,
    I32Mul = 98,
    I32DivS = 99,
    I32DivU = 100,
    I32RemS = 101,
    I32RemU = 102,
    I32And = 103,
    I32Or = 104,
    I32Xor = 105,
    I32Shl = 106,
    I32ShrS = 107,
    I32ShrU = 108,
    I32Rotl = 109,
    I32Rotr = 110,
    I64Clz = 111,
    I64Ctz = 112,
    I64Popcnt = 113,
    I64Add = 114,
    I64Sub = 115,
    I64Mul = 116,
    I64DivS = 117,
    I64DivU = 118,
    I64RemS = 119,
    I64RemU = 120,
    I64And = 121,
    I64Or = 122,
    I64Xor = 123,
    I64Shl = 124,
    I64ShrS = 125,
    I64ShrU = 126,
    I64Rotl = 127,
    I64Rotr = 128,
    F32Abs = 129,
    F32Neg = 130,
    F32Ceil = 131,
    F32Floor = 132,
    F32Trunc = 133,
    F32Nearest = 134,
    F32Sqrt = 135,
    F32Add = 136,
    F32Sub = 137,
    F32Mul = 138,
    F32Div = 139,
    F32Min = 140,
    F32Max = 141,
    F32Copysign = 142,
    F64Abs = 143,
    F64Neg = 144,
    F64Ceil = 145,
    F64Floor = 146,
    F64Trunc = 147,
    F64Nearest = 148,
    F64Sqrt = 149,
    F64Add = 150,
    F64Sub = 151,
    F64Mul = 152,
    F64Div = 153,
    F64Min = 154,
    F64Max = 155,
    F64Copysign = 156,
    I32WrapI64 = 157,
    I32TruncF32S = 158,
    I32TruncF32U = 159,
    I32TruncF64S = 160,
    I32TruncF64U = 161,
    I64ExtendI32S = 162,
    I64ExtendI32U = 163,
    I64TruncF32S = 164,
    I64TruncF32U = 165,
    I64TruncF64S = 166,
    I64TruncF64U = 167,
    F32ConvertI32S = 168,
    F32ConvertI32U = 169,
    F32ConvertI64S = 170,
    F32ConvertI64U = 171,
    F32DemoteF64 = 172,
    F64ConvertI32S = 173,
    F64ConvertI32U = 174,
    F64ConvertI64S = 175,
    F64ConvertI64U = 176,
    F64PromoteF32 = 177,
    I32ReinterpretF32 = 178,
    I64ReinterpretF64 = 179,
    F32ReinterpretI32 = 180,
    F64ReinterpretI64 = 181,
    I32Extend8S = 182,
    I32Extend16S = 183,
    I64Extend8S = 184,
    I64Extend16S = 185,
    I64Extend32S = 186,
    InterpAlloca = 187,
    InterpBrUnless = 188,
    InterpCallImport = 189,
    InterpData = 190,
    InterpDropKeep = 191,
    InterpCatchDrop = 192,
    InterpAdjustFrameForReturnCall = 193,
    I32TruncSatF32S = 194,
    I32TruncSatF32U = 195,
    I32TruncSatF64S = 196,
    I32TruncSatF64U = 197,
    I64TruncSatF32S = 198,
    I64TruncSatF32U = 199,
    I64TruncSatF64S = 200,
    I64TruncSatF64U = 201,
    MemoryInit = 202,
    DataDrop = 203,
    MemoryCopy = 204,
    MemoryFill = 205,
    TableInit = 206,
    ElemDrop = 207,
    TableCopy = 208,
    TableGet = 209,
    TableSet = 210,
    TableGrow = 211,
    TableSize = 212,
    TableFill = 213,
    RefNull = 214,
    RefIsNull = 215,
    RefFunc = 216,
    V128Load = 217,
    V128Load8X8S = 218,
    V128Load8X8U = 219,
    V128Load16X4S = 220,
    V128Load16X4U = 221,
    V128Load32X2S = 222,
    V128Load32X2U = 223,
    V128Load8Splat = 224,
    V128Load16Splat = 225,
    V128Load32Splat = 226,
    V128Load64Splat = 227,
    V128Store = 228,
    V128Const = 229,
    I8X16Shuffle = 230,
    I8X16Swizzle = 231,
    I8X16Splat = 232,
    I16X8Splat = 233,
    I32X4Splat = 234,
    I64X2Splat = 235,
    F32X4Splat = 236,
    F64X2Splat = 237,
    I8X16ExtractLaneS = 238,
    I8X16ExtractLaneU = 239,
    I8X16ReplaceLane = 240,
    I16X8ExtractLaneS = 241,
    I16X8ExtractLaneU = 242,
    I16X8ReplaceLane = 243,
    I32X4ExtractLane = 244,
    I32X4ReplaceLane = 245,
    I64X2ExtractLane = 246,
    I64X2ReplaceLane = 247,
    F32X4ExtractLane = 248,
    F32X4ReplaceLane = 249,
    F64X2ExtractLane = 250,
    F64X2ReplaceLane = 251,
    I8X16Eq = 252,
    I8X16Ne = 253,
    I8X16LtS = 254,
    I8X16LtU = 255,
    I8X16GtS = 256,
    I8X16GtU = 257,
    I8X16LeS = 258,
    I8X16LeU = 259,
    I8X16GeS = 260,
    I8X16GeU = 261,
    I16X8Eq = 262,
    I16X8Ne = 263,
    I16X8LtS = 264,
    I16X8LtU = 265,
    I16X8GtS = 266,
    I16X8GtU = 267,
    I16X8LeS = 268,
    I16X8LeU = 269,
    I16X8GeS = 270,
    I16X8GeU = 271,
    I32X4Eq = 272,
    I32X4Ne = 273,
    I32X4LtS = 274,
    I32X4LtU = 275,
    I32X4GtS = 276,
    I32X4GtU = 277,
    I32X4LeS = 278,
    I32X4LeU = 279,
    I32X4GeS = 280,
    I32X4GeU = 281,
    F32X4Eq = 282,
    F32X4Ne = 283,
    F32X4Lt = 284,
    F32X4Gt = 285,
    F32X4Le = 286,
    F32X4Ge = 287,
    F64X2Eq = 288,
    F64X2Ne = 289,
    F64X2Lt = 290,
    F64X2Gt = 291,
    F64X2Le = 292,
    F64X2Ge = 293,
    V128Not = 294,
    V128And = 295,
    V128Andnot = 296,
    V128Or = 297,
    V128Xor = 298,
    V128BitSelect = 299,
    V128AnyTrue = 300,
    V128Load8Lane = 301,
    V128Load16Lane = 302,
    V128Load32Lane = 303,
    V128Load64Lane = 304,
    V128Store8Lane = 305,
    V128Store16Lane = 306,
    V128Store32Lane = 307,
    V128Store64Lane = 308,
    V128Load32Zero = 309,
    V128Load64Zero = 310,
    F32X4DemoteF64X2Zero = 311,
    F64X2PromoteLowF32X4 = 312,
    I8X16Abs = 313,
    I8X16Neg = 314,
    I8X16Popcnt = 315,
    I8X16AllTrue = 316,
    I8X16Bitmask = 317,
    I8X16NarrowI16X8S = 318,
    I8X16NarrowI16X8U = 319,
    I8X16Shl = 320,
    I8X16ShrS = 321,
    I8X16ShrU = 322,
    I8X16Add = 323,
    I8X16AddSatS = 324,
    I8X16AddSatU = 325,
    I8X16Sub = 326,
    I8X16SubSatS = 327,
    I8X16SubSatU = 328,
    I8X16MinS = 329,
    I8X16MinU = 330,
    I8X16MaxS = 331,
    I8X16MaxU = 332,
    I8X16AvgrU = 333,
    I16X8ExtaddPairwiseI8X16S = 334,
    I16X8ExtaddPairwiseI8X16U = 335,
    I32X4ExtaddPairwiseI16X8S = 336,
    I32X4ExtaddPairwiseI16X8U = 337,
    I16X8Abs = 338,
    I16X8Neg = 339,
    I16X8Q15mulrSatS = 340,
    I16X8AllTrue = 341,
    I16X8Bitmask = 342,
    I16X8NarrowI32X4S = 343,
    I16X8NarrowI32X4U = 344,
    I16X8ExtendLowI8X16S = 345,
    I16X8ExtendHighI8X16S = 346,
    I16X8ExtendLowI8X16U = 347,
    I16X8ExtendHighI8X16U = 348,
    I16X8Shl = 349,
    I16X8ShrS = 350,
    I16X8ShrU = 351,
    I16X8Add = 352,
    I16X8AddSatS = 353,
    I16X8AddSatU = 354,
    I16X8Sub = 355,
    I16X8SubSatS = 356,
    I16X8SubSatU = 357,
    I16X8Mul = 358,
    I16X8MinS = 359,
    I16X8MinU = 360,
    I16X8MaxS = 361,
    I16X8MaxU = 362,
    I16X8AvgrU = 363,
    I16X8ExtmulLowI8X16S = 364,
    I16X8ExtmulHighI8X16S = 365,
    I16X8ExtmulLowI8X16U = 366,
    I16X8ExtmulHighI8X16U = 367,
    I32X4Abs = 368,
    I32X4Neg = 369,
    I32X4AllTrue = 370,
    I32X4Bitmask = 371,
    I32X4ExtendLowI16X8S = 372,
    I32X4ExtendHighI16X8S = 373,
    I32X4ExtendLowI16X8U = 374,
    I32X4ExtendHighI16X8U = 375,
    I32X4Shl = 376,
    I32X4ShrS = 377,
    I32X4ShrU = 378,
    I32X4Add = 379,
    I32X4Sub = 380,
    I32X4Mul = 381,
    I32X4MinS = 382,
    I32X4MinU = 383,
    I32X4MaxS = 384,
    I32X4MaxU = 385,
    I32X4DotI16X8S = 386,
    I32X4ExtmulLowI16X8S = 387,
    I32X4ExtmulHighI16X8S = 388,
    I32X4ExtmulLowI16X8U = 389,
    I32X4ExtmulHighI16X8U = 390,
    I64X2Abs = 391,
    I64X2Neg = 392,
    I64X2AllTrue = 393,
    I64X2Bitmask = 394,
    I64X2ExtendLowI32X4S = 395,
    I64X2ExtendHighI32X4S = 396,
    I64X2ExtendLowI32X4U = 397,
    I64X2ExtendHighI32X4U = 398,
    I64X2Shl = 399,
    I64X2ShrS = 400,
    I64X2ShrU = 401,
    I64X2Add = 402,
    I64X2Sub = 403,
    I64X2Mul = 404,
    I64X2Eq = 405,
    I64X2Ne = 406,
    I64X2LtS = 407,
    I64X2GtS = 408,
    I64X2LeS = 409,
    I64X2GeS = 410,
    I64X2ExtmulLowI32X4S = 411,
    I64X2ExtmulHighI32X4S = 412,
    I64X2ExtmulLowI32X4U = 413,
    I64X2ExtmulHighI32X4U = 414,
    F32X4Ceil = 415,
    F32X4Floor = 416,
    F32X4Trunc = 417,
    F32X4Nearest = 418,
    F64X2Ceil = 419,
    F64X2Floor = 420,
    F64X2Trunc = 421,
    F64X2Nearest = 422,
    F32X4Abs = 423,
    F32X4Neg = 424,
    F32X4Sqrt = 425,
    F32X4Add = 426,
    F32X4Sub = 427,
    F32X4Mul = 428,
    F32X4Div = 429,
    F32X4Min = 430,
    F32X4Max = 431,
    F32X4PMin = 432,
    F32X4PMax = 433,
    F64X2Abs = 434,
    F64X2Neg = 435,
    F64X2Sqrt = 436,
    F64X2Add = 437,
    F64X2Sub = 438,
    F64X2Mul = 439,
    F64X2Div = 440,
    F64X2Min = 441,
    F64X2Max = 442,
    F64X2PMin = 443,
    F64X2PMax = 444,
    I32X4TruncSatF32X4S = 445,
    I32X4TruncSatF32X4U = 446,
    F32X4ConvertI32X4S = 447,
    F32X4ConvertI32X4U = 448,
    I32X4TruncSatF64X2SZero = 449,
    I32X4TruncSatF64X2UZero = 450,
    F64X2ConvertLowI32X4S = 451,
    F64X2ConvertLowI32X4U = 452,
    I8X16RelaxedSwizzle = 453,
    I32X4RelaxedTruncF32X4S = 454,
    I32X4RelaxedTruncF32X4U = 455,
    I32X4RelaxedTruncF64X2SZero = 456,
    I32X4RelaxedTruncF64X2UZero = 457,
    F32X4RelaxedMadd = 458,
    F32X4RelaxedNmadd = 459,
    F64X2RelaxedMadd = 460,
    F64X2RelaxedNmadd = 461,
    I8X16RelaxedLaneSelect = 462,
    I16X8RelaxedLaneSelect = 463,
    I32X4RelaxedLaneSelect = 464,
    I64X2RelaxedLaneSelect = 465,
    F32X4RelaxedMin = 466,
    F32X4RelaxedMax = 467,
    F64X2RelaxedMin = 468,
    F64X2RelaxedMax = 469,
    I16X8RelaxedQ15mulrS = 470,
    I16X8DotI8X16I7X16S = 471,
    I32X4DotI8X16I7X16AddS = 472,
    MemoryAtomicNotify = 473,
    MemoryAtomicWait32 = 474,
    MemoryAtomicWait64 = 475,
    AtomicFence = 476,
    I32AtomicLoad = 477,
    I64AtomicLoad = 478,
    I32AtomicLoad8U = 479,
    I32AtomicLoad16U = 480,
    I64AtomicLoad8U = 481,
    I64AtomicLoad16U = 482,
    I64AtomicLoad32U = 483,
    I32AtomicStore = 484,
    I64AtomicStore = 485,
    I32AtomicStore8 = 486,
    I32AtomicStore16 = 487,
    I64AtomicStore8 = 488,
    I64AtomicStore16 = 489,
    I64AtomicStore32 = 490,
    I32AtomicRmwAdd = 491,
    I64AtomicRmwAdd = 492,
    I32AtomicRmw8AddU = 493,
    I32AtomicRmw16AddU = 494,
    I64AtomicRmw8AddU = 495,
    I64AtomicRmw16AddU = 496,
    I64AtomicRmw32AddU = 497,
    I32AtomicRmwSub = 498,
    I64AtomicRmwSub = 499,
    I32AtomicRmw8SubU = 500,
    I32AtomicRmw16SubU = 501,
    I64AtomicRmw8SubU = 502,
    I64AtomicRmw16SubU = 503,
    I64AtomicRmw32SubU = 504,
    I32AtomicRmwAnd = 505,
    I64AtomicRmwAnd = 506,
    I32AtomicRmw8AndU = 507,
    I32AtomicRmw16AndU = 508,
    I64AtomicRmw8AndU = 509,
    I64AtomicRmw16AndU = 510,
    I64AtomicRmw32AndU = 511,
    I32AtomicRmwOr = 512,
    I64AtomicRmwOr = 513,
    I32AtomicRmw8OrU = 514,
    I32AtomicRmw16OrU = 515,
    I64AtomicRmw8OrU = 516,
    I64AtomicRmw16OrU = 517,
    I64AtomicRmw32OrU = 518,
    I32AtomicRmwXor = 519,
    I64AtomicRmwXor = 520,
    I32AtomicRmw8XorU = 521,
    I32AtomicRmw16XorU = 522,
    I64AtomicRmw8XorU = 523,
    I64AtomicRmw16XorU = 524,
    I64AtomicRmw32XorU = 525,
    I32AtomicRmwXchg = 526,
    I64AtomicRmwXchg = 527,
    I32AtomicRmw8XchgU = 528,
    I32AtomicRmw16XchgU = 529,
    I64AtomicRmw8XchgU = 530,
    I64AtomicRmw16XchgU = 531,
    I64AtomicRmw32XchgU = 532,
    I32AtomicRmwCmpxchg = 533,
    I64AtomicRmwCmpxchg = 534,
    I32AtomicRmw8CmpxchgU = 535,
    I32AtomicRmw16CmpxchgU = 536,
    I64AtomicRmw8CmpxchgU = 537,
    I64AtomicRmw16CmpxchgU = 538,
    I64AtomicRmw32CmpxchgU = 539,
    Invalid = 540
}
import { ValueType } from './type';
export declare namespace Opcode {
    function getReturnType(o: OpcodeType): ValueType;
    function getParamTypes(o: OpcodeType): ValueType[];
    function getParamLength(o: OpcodeType): number;
    function getMemSize(o: OpcodeType): ValueType;
    function getPrefix(o: OpcodeType): number;
    function getCode(o: OpcodeType): number;
    function getText(o: OpcodeType): string;
    function getDecompText(o: OpcodeType): string;
}
export declare const opcodeData: Record<OpcodeType, [
    ValueType,
    ValueType,
    ValueType,
    ValueType,
    number,
    number,
    number,
    string,
    string
]>;
