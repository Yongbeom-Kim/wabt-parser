import { type OpcodeType } from './opcode';
import { type ValueType } from './type';
export declare class Token {
    type: TokenType;
    lexeme: string;
    line: number;
    col: number;
    indexInSource: number;
    valueType: ValueType | null;
    opcodeType: OpcodeType | null;
    constructor(type: TokenType, lexeme: string, line: number, col: number, indexInSource: number, opcodeType?: OpcodeType | null, valueType?: ValueType | null);
    static EofToken(lexeme: string, line: number, col: number, indexInSource: number): Token;
    isBareToken(): boolean;
    isStringToken(): boolean;
    isValueToken(): boolean;
    isOpcodeToken(): boolean;
    isOpcodeType(opcodeType: OpcodeType): boolean;
    isLiteral(): boolean;
    isReference(): boolean;
    getOpcodeParamLength(): number;
    getOpcodeEncoding(): number;
}
export declare function isTokenTypeBare(token_type: TokenType | null): boolean;
export declare function isTokenTypeType(token_type: TokenType | null): boolean;
export declare function isTokenTypeOpcode(token_type: TokenType | null): boolean;
export declare function isTokenTypeLiteral(token_type: TokenType | null): boolean;
export declare function isTokenTypeRefKind(token_type: TokenType | null): boolean;
export declare enum TokenType {
    Invalid = "Invalid",
    Array = "array",
    AssertException = "assert_exception",
    AssertExhaustion = "assert_exhaustion",
    AssertInvalid = "assert_invalid",
    AssertMalformed = "assert_malformed",
    AssertReturn = "assert_return",
    AssertTrap = "assert_trap",
    AssertUnlinkable = "assert_unlinkable",
    Bin = "bin",
    Item = "item",
    Data = "data",
    Declare = "declare",
    Delegate = "delegate",
    Do = "do",
    Either = "either",
    Elem = "elem",
    Eof = "EOF",
    Tag = "tag",
    Export = "export",
    Field = "field",
    Get = "get",
    Global = "global",
    Import = "import",
    Invoke = "invoke",
    Input = "input",
    Local = "local",
    Lpar = "(",
    Memory = "memory",
    Module = "module",
    Mut = "mut",
    NanArithmetic = "nan:arithmetic",
    NanCanonical = "nan:canonical",
    Offset = "offset",
    Output = "output",
    Param = "param",
    Ref = "ref",
    Quote = "quote",
    Register = "register",
    Result = "result",
    Rpar = ")",
    Shared = "shared",
    Start = "start",
    Struct = "struct",
    Table = "table",
    Then = "then",
    Type = "type",
    I8X16 = "i8x16",
    I16X8 = "i16x8",
    I32X4 = "i32x4",
    I64X2 = "i64x2",
    F32X4 = "f32x4",
    F64X2 = "f64x2",
    First_Bare = "Invalid",
    Last_Bare = "F64X2",
    Float = "FLOAT",
    Int = "INT",
    Nat = "NAT",
    First_Literal = "Float",
    Last_Literal = "Nat",
    AtomicFence = "atomic.fence",
    AtomicLoad = "ATOMIC_LOAD",
    AtomicNotify = "ATOMIC_NOTIFY",
    AtomicRmw = "ATOMIC_RMW",
    AtomicRmwCmpxchg = "ATOMIC_RMW_CMPXCHG",
    AtomicStore = "ATOMIC_STORE",
    AtomicWait = "ATOMIC_WAIT",
    Binary = "BINARY",
    Block = "block",
    Br = "br",
    BrIf = "br_if",
    BrTable = "br_table",
    Call = "call",
    CallIndirect = "call_indirect",
    CallRef = "call_ref",
    Catch = "catch",
    CatchAll = "catch_all",
    Compare = "COMPARE",
    Const = "CONST",
    Convert = "CONVERT",
    DataDrop = "data.drop",
    Drop = "drop",
    ElemDrop = "elem.drop",
    Else = "else",
    End = "end",
    GlobalGet = "global.get",
    GlobalSet = "global.set",
    If = "if",
    Load = "LOAD",
    LocalGet = "local.get",
    LocalSet = "local.set",
    LocalTee = "local.tee",
    Loop = "loop",
    MemoryCopy = "memory.copy",
    MemoryFill = "memory.fill",
    MemoryGrow = "memory.grow",
    MemoryInit = "memory.init",
    MemorySize = "memory.size",
    Nop = "nop",
    RefExtern = "ref.extern",
    RefFunc = "ref.func",
    RefIsNull = "ref.is_null",
    RefNull = "ref.null",
    Rethrow = "rethrow",
    ReturnCallIndirect = "return_call_indirect",
    ReturnCall = "return_call",
    Return = "return",
    Select = "select",
    SimdLaneOp = "SIMDLANEOP",
    SimdLoadSplat = "SIMDLOADSPLAT",
    SimdLoadLane = "SIMDLOADLANE",
    SimdStoreLane = "SIMDSTORELANE",
    SimdShuffleOp = "i8x16.shuffle",
    Store = "STORE",
    TableCopy = "table.copy",
    TableFill = "table.full",
    TableGet = "table.get",
    TableGrow = "table.grow",
    TableInit = "table.init",
    TableSet = "table.set",
    TableSize = "table.size",
    Ternary = "TERNARY",
    Throw = "throw",
    Try = "try",
    Unary = "UNARY",
    Unreachable = "unreachable",
    First_Opcode = "AtomicFence",
    Last_Opcode = "Unreachable",
    AlignEqNat = "align=",
    LparAnn = "Annotation",
    OffsetEqNat = "offset=",
    Reserved = "Reserved",
    Text = "TEXT",
    Var = "VAR",
    First_String = "AlignEqNat",
    Last_String = "Var",
    ValueType = "VALUETYPE",
    First_Type = "ValueType",
    Last_Type = "ValueType",
    Func = "func",
    Extern = "extern",
    Exn = "exn",
    First_RefKind = "Func",
    Last_RefKind = "Exn",
    First = "Invalid",
    Last = "Exn"
}
